During compilation and linking, non-functional properties of software
such as running time and executable size may be optimized.  Current
techniques rely on operations which may be formally proven to preserve
program semantics.

Using a test-suite based definition of program behavior we are able to
apply non-semantic preserving mutations to software resulting in
program variants not reachable through semantic preserving operation.
Due to the inherent mutational robustness of software [1], many of
these mutations will change the runtime behavior of software without
changing the specification to which the software conforms.

Some program variants will have desirable non-functional properties
such as faster running times, reduced energy consumption or a smaller
executable size.  By assigning fitness to variants based on these
characteristics it is possible to optimize software.

Modern system emulators and profilers allow fine-grained monitoring of
aspects of program execution, such as energy consumption and
communication overhead, which may be difficult to predict a-priori.
This repository uses Graphite [2] and Linux perf [3] to measure
non-functional properties of program variants in an EC system for
software optimization.

This repository will hold three benchmarks suites used in this
investigation of evolutionary program optimization.  The PARSEC
benchmark suite [4] focuses on emerging workloads.  The Spec benchmark
suite [5] stresses a systems "processor, memory subsystem and
compiler", and a collection of warehouse compute applications.

Footnotes: 
[1]  http://arxiv.org/abs/1204.4224

[2]  http://groups.csail.mit.edu/carbon/?page_id=111

[3]  https://perf.wiki.kernel.org/index.php/Main_Page

[4]  http://parsec.cs.princeton.edu/

[5]  http://www.spec.org/cpu2006/
