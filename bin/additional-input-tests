#!/bin/bash
#
# Usage: additional-input-tests BENCHMARK EXECUTABLE
#
# This script must live in optimization/bin so that the script can
# find the path to parsec. PARSEC 3.0 must be installed in
# optimization/benchmarks/parsec-3.0
#
# The benchmark must have been previously built with parsecmgmt so
# that the original build can be used as an oracle
#
. $(dirname $0)/common
BIN_DIR=$BASE/bin
# PARSEC_DIR=$BASE/benchmarks/parsec-3.0/
# INPUT_DIR=$BASE/etc/additional-inputs/
INPUT_DIR=$BASE/benchmarks/

if [[ $# -le 1 ]]; then help; fi
BENCHMARK=$1
EXECUTABLE=$2

case $BENCHMARK in
  blackscholes)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  bodytrack)
    BODYTRACK_ADDL=$BASE/benchmarks/bodytrack/addl
    BODYTRACK_MASTER=$BASE/benchmarks/bodytrack/bodytrack.orig
    INPUT=$BODYTRACK_ADDL/sequenceA/
    OUTPUTS=$BODYTRACK_ADDL/outputs
    
    # set up the directory structure and populate with alternate inputs 
    # and known good outputs
    if [[ ! -d $BODYTRACK_ADDL ]]; then
      mkdir $BODYTRACK_ADDL
      echo "Downloading the additional test inputs:"
      curl http://parsec.cs.princeton.edu/download/other/bodytrack_sequenceA.tgz \
           -o $BODYTRACK_ADDL/bodytrack.alt.input.tgz
      cd $BODYTRACK_ADDL
      tar zxvf bodytrack.alt.input.tgz >/dev/null 2>&1
      mkdir $OUTPUTS
      if [[ ! -e $BODYTRACK_MASTER ]]; then
        $BIN_DIR/mgmt orig bodytrack
      fi
      
      echo "Generating known good output:"
      $BODYTRACK_MASTER $INPUT 4 1   5    1 0 1; mv $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.0 1>/dev/null 2>&1
      $BODYTRACK_MASTER $INPUT 4 1   100  3 0 1; mv $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.1 1>/dev/null 2>&1
      $BODYTRACK_MASTER $INPUT 4 1   1000 5 0 1; mv $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.2 1>/dev/null 2>&1
      $BODYTRACK_MASTER $INPUT 4 2   2000 5 0 1; mv $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.3 1>/dev/null 2>&1
      $BODYTRACK_MASTER $INPUT 4 4   4000 5 0 1; mv $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.4 1>/dev/null 2>&1
      $BODYTRACK_MASTER $INPUT 4 261 4000 5 0 1; mv $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.5 1>/dev/null 2>&1
    fi

    echo "Testing $2:"
    printf "Test 0: "
    $EXECUTABLE $INPUT 4 1 5 1 0 1 1>/dev/null 2>&1
    diff $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.0 
    if [[ $? = 0 ]]; then printf "Pass\n"; else printf "Fail\n"; fi
    rm $INPUT/Result0000.bmp

    printf "Test 1: "
    $EXECUTABLE $INPUT 4 1 100 3 0 1 1>/dev/null 2>&1
    diff $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.1 
    if [[ $? = 0 ]]; then printf "Pass\n"; else printf "Fail\n"; fi
    rm $INPUT/Result0000.bmp

    printf "Test 2: "
    $EXECUTABLE $INPUT 4 1 1000 5 0 1 1>/dev/null 2>&1
    diff $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.2 
    if [[ $? = 0 ]]; then printf "Pass\n"; else printf "Fail\n"; fi
    rm $INPUT/Result0000.bmp

    printf "Test 3: "
    $EXECUTABLE $INPUT 4 2 2000 5 0 1 1>/dev/null 2>&1
    diff $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.3 
    if [[ $? = 0 ]]; then printf "Pass\n"; else printf "Fail\n"; fi
    rm $INPUT/Result0000.bmp

    printf "Test 4: "
    $EXECUTABLE $INPUT 4 4 4000 5 0 1 1>/dev/null 2>&1
    diff $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.4
    if [[ $? = 0 ]]; then printf "Pass\n"; else printf "Fail\n"; fi
    rm $INPUT/Result0000.bmp

    printf "Test 5: "
    $EXECUTABLE $INPUT 4 261 4000 5 0 1 1>/dev/null 2>&1
    diff $INPUT/Result0000.bmp $OUTPUTS/bodytrack.golden.5
    if [[ $? = 0 ]]; then printf "Pass\n"; else printf "Fail\n"; fi
    rm $INPUT/Result0000.bmp
  ;;
  facesim)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  ferret)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  fluidanimate)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  freqmine)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  raytrace)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  swaptions)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  vips)
  error "Test for $BENCHMARK not implemented yet!"
  ;;
  x264)
    X264_FLAGS=""
    X264_FLAGS+=" --quiet --qp 20 --partitions b8x8,i4x4 --ref 5"
    X264_FLAGS+=" --direct auto --b-pyramid --weightb --mixed-refs"
    X264_FLAGS+=" --no-fast-pskip --me umh --subme 7"
    X264_FLAGS+=" --analyse b8x8,i4x4 --threads 1"
    X264_ADDL=$INPUT_DIR/x264/addl/
    X264_MASTER=$BASE/benchmarks/x264/x264

    if [[ ! -d $X264_ADDL ]]; then
      if [[ ! -e $X264_MASTER ]]; then
        $BIN_DIR/mgmt output x264
      fi
      mkdir $X264_ADDL
      curl http://media.xiph.org/video/derf/y4m/claire_qcif-5.994Hz.y4m -o $X264_ADDL/x264.input.0.y4m
      curl http://media.xiph.org/video/derf/y4m/bus_qcif_7.5fps.y4m     -o $X264_ADDL/x264.input.1.y4m
      curl http://media.xiph.org/video/derf/y4m/foreman_qcif_7.5fps.y4m -o $X264_ADDL/x264.input.2.y4m
      curl http://media.xiph.org/video/derf/y4m/soccer_qcif_15fps.y4m   -o $X264_ADDL/x264.input.3.y4m
      curl http://media.xiph.org/video/derf/y4m/bus_cif_15fps.y4m       -o $X264_ADDL/x264.input.4.y4m

      for n in {0..4}; do
        echo "Making gold standard output $X264_ADDL/x264.golden.$n"
        $X264_MASTER $X264_FLAGS $X264_ADDL/x264.input.$n.y4m -o $X264_ADDL/x264.golden.$n >/dev/null 2>&1
      done
    fi
    for n in {0..4}; do
      printf "Test $n: "
      $EXECUTABLE $X264_FLAGS $X264_ADDL/x264.input.$n.y4m -o $X264_ADDL/x264.tstout.$n >/dev/null 2>&1
      diff $X264_ADDL/x264.golden.$n $X264_ADDL/x264.tstout.$n >/dev/null 2>&1
      if [[ $? = 0 ]]; then
        printf "PASS\n"
      else
        printf "FAIL\n"
        printf "tried: diff $X264_ADDL/x264.golden.$n $X264_ADDL/x264.tstout.$n\n"
      fi
    done
    rm $X264_ADDL/*tstout*
  ;;
  *)
    warning "Invalid benchmark \"$1\"!"
    help
    ;;
esac
