#!/bin/bash
#
# Usage: run BENCHMARK EXECUTABLE [OPTIONS...]
#  run a version of a benchmark program
#
# Options:
#  -l,--limit ----- limit script for sandboxing
#  -p,--perf ------ collect performance counters
#  -a,--annotate -- annotate the assembly with perf
#  -c,--counters -- comma separated list of perf counters
#  -w,--wattsup --- collect watts-up data during execution
#  -t,--time ------ collect time of execution
#  -r,--repeat N -- repeat the execution N times
#  -R,--raw ------- print raw output
#  -s,--size ------ input size test,tiny,small,medium,large
#  -d,--debug ----- print commands before running them
#  -k,--keep ------ keep output
#  -K,--keep-perf - keep perf output
#  -i,--input IN -- specify non-standard input
#  -o,--output OUT - specify non-standard output
#
# Benchmark should be one of
#  blackscholes
#  bodytrack
#  ferret
#  fluidanimate
#  freqmine
#  swaptions
#  vips
#  x264
#  nbody
#
. $(dirname $0)/common

## Parse Options
if [ $# -lt 2 ];then help; fi
ARGS="$@"
BENCHMARK="$1"
SIZE=$(size_for_benchmark $BENCHMARK)
EXECUTABLE="$2"
PERF=""
ANNOTATE=""
COUNTERS=""
WATTSUP=""
TIME=""
REPEAT=""
RAW=""
DEBUG=""
KEEP=""
KEEP_PERF=""
EXIT=""
ERROR=0
INPUT="$BASE/benchmarks/$BENCHMARK/$BENCHMARK.input"
OUTPUT="$BASE/benchmarks/$BENCHMARK/$BENCHMARK.output"
OUT=$(mktemp)
eval set -- \
    $(getopt -o l:pac:wtr:Rs:dkKi:o: \
    -l limit:,perf,annotate,counters:,wattsup,time,repeat:,raw,size:,debug,keep,keep-perf,input:,output: \
    -- "$@" || help;)
while [ $# -gt 0 ];do
    case $1 in
        -l|--limit) LIMIT="$2"; shift;;
        -p|--perf)  PERF="yes";;
        -a|--annotate) ANNOTATE="yes"; PERF="yes";;
        -r|--repeat) REPEAT="$2"; shift;;
        -c|--counters) PERF="yes"; COUNTERS="$2"; shift;;
        -w|--wattsup) WATTSUP="yes";;
        -t|--time)  TIME="yes";;
        -R|--raw) RAW="yes";;
        -s|--size) SIZE="$2"; shift;;
        -d|--debug) DEBUG="yes";;
        -k|--keep) KEEP="yes";;
        -K|--keep-perf) KEEP_PERF="yes";;
        -i|--input) INPUT="$2"; shift;;
        -o|--output) OUTPUT="$2"; shift;;
        (--) shift; break;;
        (-*) error "unrecognized option $1";;
        (*)  break;;
    esac
    shift
done
if [ ! -z $RAW ] && [ ! -z $PERF ];then
    error "can't print RAW and PERF results simultaneously"
fi

if [ -z $COUNTERS ];then
    case $ARCH in
        intel)
            COUNTERS="cycles,instructions,r532010,r538010,cache-references,cache-misses"
            ;;
        amd)
            COUNTERS="cycles,instructions,r533f00,cache-references,cache-misses"
            ;;
    esac
fi

PREFIX="$LIMIT"
if [ ! -z $TIME ];then
    if [ ! -z $PERF    ];then error "time and perf are incompatible options"; fi
    if [ ! -z $WATTSUP ];then error "time and WattsUp are incompatible options"; fi
    if [ ! -z $RAW     ];then error "time and raw are incompatible options"; fi
    # setup output file for wu.py
    TIME_OUT=$(mktemp /tmp/time.XXXXXXXX.txt)
    # add wu.py to the prefix
    PREFIX+=" time -p -o $TIME_OUT"
elif [ ! -z $WATTSUP ];then
    if [ ! -z $PERF ];then error "WattsUp and perf are incompatible options"; fi
    if [ ! -z $RAW  ];then error "WattsUp and raw are incompatible options"; fi
    if [ ! -z $RAW  ];then error "WattsUp and time are incompatible options"; fi
    # setup output file for wu.py
    WU_OUT=$(mktemp /tmp/wu.XXXXXXXX.csv)
    # add wu.py to the prefix
    PREFIX+=" $BASE/bin/wu.py -o $WU_OUT ttyUSB0 --"
fi
if [ -z $PERF ];then
    # maybe print out RAW and clean up OUT
    function exit_hook (){
        if [ -z $RAW ];then
            echo "$EXIT,exit"
            echo "$ERROR,error"
            if [ ! -z $WATTSUP ];then
                cat $WU_OUT|sed 's/,/ /g'|transpose \
                    |awk '{print $2,$1}'|sed 's/ /,/g'
            elif [ ! -z $TIME ];then
                cat $TIME_OUT|awk '{print $2,$1}'|sed 's/ /,/g'
            fi
        else
            cat $OUT
        fi
        if [ -z $KEEP ];then
            rm -rf $OUT
            if [ ! -z $WATTSUP ];then rm -f $WU_OUT; fi
            if [ ! -z $WATTSUP ];then rm -f $TIME_OUT; fi
            if [ ! -z "$tmp"   ];then rm -f $tmp;    fi
            if [ ! -z "$tmpd"  ];then rm -rf $tmpd;  fi
        else
            echo "output keep at $OUT";
        fi; }
else
    # perf prefix to the command
    PERF_OUT=$(mktemp)
    if [ -z $ANNOTATE ];then
        PREFIX+=" perf stat -e $COUNTERS -o $PERF_OUT"
    else
        PREFIX+=" perf record -e $COUNTERS -o $PERF_OUT"
    fi
    if [ ! -z "$REPEAT" ];then PREFIX+=" -r $REPEAT"; fi
    PREFIX+=" --"
    # handle perf output on exit
    function exit_hook (){
        if [ -z $ANNOTATE ];then
            echo "$EXIT,exit"
            echo "$ERROR,error"
            # collect missed counters
            cat $PERF_OUT \
                |grep "^ *[0-9,.]\+ [a-z]\+" \
                |sed -e 's/^ *//' \
                     -e 's/,//g' \
                     -e 's/ raw / /' \
                     -e 's/ \([^ ]\+\)[^(]*/,\1/' \
                     -e 's/,0[Xx]/,r/' \
                     -e 's/([^0-9]*\([0-9.]\+\).*$/,\1%/';
            # comma separated list of missed counters
            MISSED=$(grep "not counted" $PERF_OUT \
                |sed 's/^.*counted> //;s/ *$//' \
                |tr '\n' ',' \
                |sed 's/,$//')
            # re-run only reporting the missed counters
            if [ ! -z $MISSED ];then
                $0 $ARGS -c $MISSED|grep $(echo "$MISSED"|sed 's/,/\\|/')
            fi
        else
            perf annotate -i $PERF_OUT
            # |grep ": \+[a-fA-F0-9]\+" \
            # |sed 's/ \([a-fA-F0-9]\+\):.*$/\1/;s/\s*:\s*/,/;s/^\s*//'
        fi
        if [ -z $KEEP_PERF ];then
            rm -f $PERF_OUT;
        else
            echo "perf output keep at $PERF_OUT";
        fi
        if [ -z $KEEP ];then
            rm -rf $OUT;
        else
            echo "output keep at $OUT";
        fi; }
fi
trap exit_hook EXIT

AWK_CMD=''
AWK_CMD+='function abs(x){return ((x < 0.0) ? -x : x)}'
AWK_CMD+='BEGIN{ diff=0; }'
AWK_CMD+='{ diff+=abs($1-$2); }'
AWK_CMD+='END { print diff }'
num_diff(){ # diff of aggregate numerical closeness
    paste <(awk '{print $1}' $1) <(awk '{print $1}' $2)|awk "$AWK_CMD"; }

run(){ # run, first argument picks an output stream to return
    local out=$1; shift;
    if [ ! -z $DEBUG ];then echo "$PREFIX $@" >&2; fi
    # possibly do multiple runs
    if [ -z $PERF ] && [ -z $WATTSUP ] && [ ! -z $REPEAT ];then
            for i in $(seq $(($REPEAT - 1)));do
                $PREFIX $@ 1>/dev/null 2>/dev/null
                EXIT=$?
            done
    fi
    if [ ! -z $WATTSUP ];then
        CMD="for i in \$(seq $REPEAT);do $@ 1>/dev/null 2>/dev/null; done"
        $PREFIX sh -c "$CMD"
        EXIT=$?
    else
        # then do the run that counts
        if [ $out -eq 1 ];then
            $PREFIX $@ 2>/dev/null
            EXIT=$?
        elif [ $out -eq 2 ];then
            $PREFIX $@ 3>&1 1>/dev/null 2>&3
            EXIT=$?
        else
            $PREFIX $@ >/dev/null 2>/dev/null
            EXIT=$?
        fi
    fi; }

freqclean(){
    sed 's/[()]//g'|awk '{all=0; for(i=1; i<=NF; i++){all+=$i}; print all}'; }

rayclean(){
    cat $1|grep -ve "^ *\(files\|build time\|Adding obj file:\) "; }

case $BENCHMARK in
    blackscholes)
        run 0 $EXECUTABLE 1 "$INPUT" $OUT
        if [ -z $RAW ];then
            ERROR=$(num_diff $OUT $OUTPUT);
        fi
        ;;
    bodytrack)
        tmp=$(mktemp -d)
        base=$(pwd)
        pushd $tmp >/dev/null
        cp -R $INPUT input
        if ! [[ "$EXECUTABLE" = /* ]];then
            EXECUTABLE="$base/$EXECUTABLE"
        fi
        case $SIZE in
            test)   run 0 $EXECUTABLE input 4 1 5    1 0 1;;
            tiny)   run 0 $EXECUTABLE input 4 1 100  3 0 1;;
            small)  run 0 $EXECUTABLE input 4 1 1000 5 0 1;;
            medium) run 0 $EXECUTABLE input 4 2 2000 5 0 1;;
            large)  run 0 $EXECUTABLE input 4 4 4000 5 0 1;;
            huge)   run 0 $EXECUTABLE input 4 261 4000 5 0 1;;
        esac
        rm $OUT
        cp -R input $OUT
        popd >/dev/null
        for file in $(ls $OUT/Result*);do
            f=$(basename $file)
            diff $OUT/$f $OUTPUT/$f
            ERROR=$(($ERROR + $?))
        done >/dev/null 2>/dev/null
        diff <(ls $OUT) <(ls $OUTPUT) >/dev/null 2>/dev/null
        ERROR=$(($ERROR + $?))
        rm -rf $tmp
        ;;
    facesim)
        tmp=$(mktemp -d)
        base=$(pwd)
        pushd $tmp >/dev/null
        cp -R $INPUT Face_Data
        if ! [[ "$EXECUTABLE" = /* ]];then
            EXECUTABLE="$base/$EXECUTABLE"
        fi
        run 0 $EXECUTABLE -timing -threads 1
        rm $OUT
        mv Storytelling $OUT
        popd >/dev/null
        for f in $(ls $OUTPUT/output|grep -v log.txt);do
            diff $OUT/output/$f $OUTPUT/output/$f
            ERROR=$(($ERROR + $?))
        done >/dev/null 2>/dev/null
        ERROR=$(($ERROR + $?))
        rm -rf $tmp
        ;;
    ferret)
        case $SIZE in
            test)   run 0 $EXECUTABLE $INPUT/corel lsh $INPUT/queries 5  5  1 $OUT;;
            tiny)   run 0 $EXECUTABLE $INPUT/corel lsh $INPUT/queries 5  5  1 $OUT;;
            small)  run 0 $EXECUTABLE $INPUT/corel lsh $INPUT/queries 10 20 1 $OUT;;
            medium) run 0 $EXECUTABLE $INPUT/corel lsh $INPUT/queries 10 20 1 $OUT;;
            large)  run 0 $EXECUTABLE $INPUT/corel lsh $INPUT/queries 10 20 1 $OUT;;
            huge)   run 0 $EXECUTABLE $INPUT/corel lsh $INPUT/queries 50 20 1 $OUT;;
        esac
        ERROR=$(diff <(sed 's/^.*ferret.input//' $OUT) \
                     <(sed 's/^.*ferret.input//' $OUTPUT)|wc -l)
        ;;
    fluidanimate)
        case $SIZE in
            test)   run 0 $EXECUTABLE 1 1 "$INPUT" $OUT;;
            tiny)   run 0 $EXECUTABLE 1 3 "$INPUT" $OUT;;
            small|medium|large) run 0 $EXECUTABLE 1 5 "$INPUT" $OUT;;
            huge)   run 0 $EXECUTABLE 1 500 "$INPUT" $OUT;;
        esac
        diff $OUT $OUTPUT >/dev/null 2>/dev/null
        ERROR=$?
        ;;
    freqmine)
        case $SIZE in
            test)   run 0 env OMP_NUM_THREADS=1 $EXECUTABLE "$INPUT" 1   $OUT;;
            tiny)   run 0 env OMP_NUM_THREADS=1 $EXECUTABLE "$INPUT" 3   $OUT;;
            small)  run 0 env OMP_NUM_THREADS=1 $EXECUTABLE "$INPUT" 220 $OUT;;
            medium) run 0 env OMP_NUM_THREADS=1 $EXECUTABLE "$INPUT" 410 $OUT;;
            large)  run 0 env OMP_NUM_THREADS=1 $EXECUTABLE "$INPUT" 790 $OUT;;
            huge)   run 0 env OMP_NUM_THREADS=1 $EXECUTABLE "$INPUT" 11000 $OUT;;
        esac
        diff $OUT $OUTPUT >/dev/null 2>/dev/null
        ERROR=$?
        ;;
    # Ignoring raytrace, because it does not generate any testable
    # results (just debug info).
    raytrace)
        case $SIZE in
            test)   run 1 $EXECUTABLE "$INPUT" -automove -nthreads 1 -frames 1 -res 1 1;;
            tiny)   run 1 $EXECUTABLE "$INPUT" -automove -nthreads 1 -frames 1 -res 16 16;;
            small)  run 1 $EXECUTABLE "$INPUT" -automove -nthreads 1 -frames 3 -res 480 270;;
            medium) run 1 $EXECUTABLE "$INPUT" -automove -nthreads 1 -frames 3 -res 960 540;;
            large)  run 1 $EXECUTABLE "$INPUT" -automove -nthreads 1 -frames 3 -res 1920 1080;;
            huge)   run 1 $EXECUTABLE "$INPUT" -automove -nthreads 1 -frames 200 -res 1920 1080;;
        esac >$OUT
        diff -Bw <(rayclean $OUT) <(rayclean $OUTPUT) >/dev/null 2>/dev/null
        ERROR=$?
        ;;
    swaptions)
        case $SIZE in
            test)  run 2 $EXECUTABLE -ns 1   -sm 5       -nt 1 > $OUT;;
            tiny)  run 2 $EXECUTABLE -ns 3   -sm 50      -nt 1 > $OUT;;
            small) run 2 $EXECUTABLE -ns 16  -sm 10000   -nt 1 > $OUT;;
            medium)run 2 $EXECUTABLE -ns 32  -sm 20000   -nt 1 > $OUT;;
            large) run 2 $EXECUTABLE -ns 64  -sm 40000   -nt 1 > $OUT;;
            huge)  run 2 $EXECUTABLE -ns 128 -sm 1000000 -nt 1 > $OUT;;
        esac
        diff $OUT $OUTPUT >/dev/null 2>/dev/null
        ERROR=$?
        ;;
    vips)
        tmpd=$(mktemp -d)
        tmp=$(mktemp vips-XXXXXXXX.v)
        cp $EXECUTABLE $tmpd/vips
        run 0 $tmpd/vips im_benchmark --vips-concurrency=1 "$INPUT" $tmp
        mv $tmp $OUT
        rm -rf $tmpd
        diff \
            <(grep --binary-file=text -v im_benchmark $OUT) \
            <(grep --binary-file=text -v im_benchmark $OUTPUT) \
            >/dev/null 2>/dev/null
        ERROR=$?
        ;;
    x264)
        X264_CMD=""
        X264_CMD+=" --quiet --qp 20 --partitions b8x8,i4x4 --ref 5"
        X264_CMD+=" --direct auto --b-pyramid --weightb --mixed-refs"
        X264_CMD+=" --no-fast-pskip --me umh --subme 7"
        X264_CMD+=" --analyse b8x8,i4x4 --threads 1"
        tmp=$(mktemp /tmp/tmp.XXXXXXXX.y4m)
        cp $INPUT $tmp
        run 0 $EXECUTABLE $X264_CMD -o $OUT $tmp
        rm -f $tmp
        diff $OUT $OUTPUT >/dev/null 2>/dev/null
        ERROR=$?
        ;;

    ## SHOOTOUT
    nbody)
        case $SIZE in
            test)   nbody_size=10000;;
            tiny)   nbody_size=100000;;
            small)  nbody_size=500000;;
            medium) nbody_size=5000000;;
            large)  nbody_size=50000000;;
            huge)   nbody_size=1000000000;;
        esac
        run 1 $EXECUTABLE $nbody_size > $OUT
        ndiff -q -abserr 1e-7 $OUTPUT $OUT >/dev/null 2>/dev/null
        ERROR=$?
        ;;

    # Instruction for running SPEC programs
    #
    # 13 (run it), it tells you to use "specinvoke" but the fine print
    # about a cross-compiled environment mentions how to find the
    # actual commands.
    #
    # http://www.spec.org/cpu2006/Docs/runspec-avoidance.html
    #
    # Unfortunately, spec actually uses C programs which are linked
    # with their benchmarks as their test drivers, so we might not be
    # able to simply re-use their stuff.
    # 
    bzip2)
        tmp=$(mktemp)
        cp "$INPUT" $tmp
        run 1 $EXECUTABLE -c $tmp > $OUT
        EXIT=$?
        ERROR=0
        rm -f $tpm
        # compare compressed size to original compressed file
        if [ $(cat $OUT|wc -c) -gt $(cat $OUTPUT|wc -c) ];then
            ERROR=$(($ERROR + 1))
        fi
        # then un-compress and compare to the original
        diff "$INPUT" <(bunzip2 -c $OUT) >/dev/null 2>/dev/null
        ERROR=$(($ERROR + $?))
        ;;
    h264ref)
        case $SIZE in
            test)   FRAMES=1;;
            tiny)   FRAMES=2;;
            small)  FRAMES=4;;
            medium) FRAMES=6;;
            large)  FRAMES=8;;
        esac
        run 0 $EXECUTABLE -d "${INPUT%.input}.cfg" \
            -p FramesToBeEncoded=$FRAMES \
            -p InputFile="$INPUT" \
            -p OutputFile="$OUT"
        EXIT=$?
        diff $OUTPUT $OUT >/dev/null 2>/dev/null
        ERROR=$?
        ;;
    *) error "no test implemented for '$BENCHMARK'";;
esac
