#!/bin/bash
#
# Usage: setup [OPTIONS...]
#  setup the benchmarks
#
# Options:
#  -a,--action ----- unpack, compile or link; default is all three
#  -s,--suite ------ specific benchmark suite
#  -b,--benchmark -- specific benchmark program
#
. $(dirname $0)/common
BASE="$(dirname $0)"

## Parse Options
ACTION=""
SUITE="parsec"
BENCHMARK=""
eval set \
    -- $(getopt -o a:s:b:c:f: -l action:,suite:,benchmark:,compiler:,flag: \
    -- "$@" || echo "$HELP_TEXT" && exit 1;)
while [ $# -gt 0 ];do
    case $1 in
        -a|--action) ACTION="$2"; shift;;
        -s|--suite) SUITE="$2"; shift;;
        -b|--benchmark) BENCHMARK="$2"; shift;;
        (--) shift; break;;
        (-*) error "unrecognized option $1";;
        (*)  break;;
    esac
    shift
done

## PARSEC applications
declare -a PARSEC_APPS
PARSEC_APPS+=(blackscholes)
PARSEC_APPS+=(bodytrack)
PARSEC_APPS+=(facesim)
PARSEC_APPS+=(ferret)
PARSEC_APPS+=(fluidanimate)
PARSEC_APPS+=(freqmine)
PARSEC_APPS+=(raytrace)
PARSEC_APPS+=(swaptions)
PARSEC_APPS+=(vips)
PARSEC_APPS+=(x264)

parsec_unpack(){
    local pkg=$1;
    PKG_DIR="pkgs/apps/$pkg"
    if [ -d "../$pkg" ];then
        msg "$pkg already exists"
    else
        mkdir -p ../$pkg

        msg "building $pkg"
        cp -R "$PKG_DIR/src" ../$pkg/src

        if [ -f "$PKG_DIR/inputs/input_simlarge.tar" ];then
            msg "generating test input for $pkg"
            mkdir -p ../$pkg/inputs
            cd "../$pkg/inputs"
            tar xf "../../parsec-3.0/$PKG_DIR/inputs/input_simlarge.tar"
            cd "../../parsec-3.0"
        else
            warning "no input for $pkg"
        fi
    fi
}

FLUID_FLAGS_ALL="-g -O3 -funroll-loops -fprefetch-loop-arrays "
FLUID_FLAGS_ALL+="-fpermissive -fno-exceptions -static-libgcc "
FLUID_FLAGS_ALL+="-Wl,--hash-style=both,--as-needed "
FLUID_FLAGS_ALL+="-DPARSEC_VERSION=3.0-beta-20120904 "
FLUID_FLAGS_ALL+="-Wno-invalid-offsetof "
FLUID_FLAGS_ALL+="-pthread -D_GNU_SOURCE -D__XOPEN_SOURCE=600"

FLUID_FLAGS_MIN="-Wno-invalid-offsetof"

parsec_compile(){
    local pkg=$1;
    SRC_DIR="../$pkg/src"
    if [ ! -d "$SRC_DIR" ];then
        error "$SRC_DIR doesn't exist"
    else
        cd "$SRC_DIR"
        if [ -f "$pkg.s" ];then
            msg "$pkg.s already exists"
        else
            msg "compiling $pkg"
            case $pkg in
                blackscholes)
                    g++ -DNCO=4 blackscholes.c -S -o blackscholes.s ;;
                bodytrack)
                    warning "bodytrack compilation not configured";;
                facesim)
                    warning "facesim compilation not configured";;
                fluidanimate)
                    cat pthreads.cpp >  all.cpp
                    cat cellpool.cpp >> all.cpp
                    cat parsec_barrier.cpp >> all.cpp
                    # g++-4.4 $FLUID_FLAGS_ALL -combine -S all.cpp -o fluidanimate.s
                    g++-4.4 $FLUID_FLAGS_MIN -combine -S all.cpp -o fluidanimate.s;;
            esac
        fi
    fi
}

parsec_apps(){
    if [ -z "$BENCHMARK" ];then
        for pkg in ${PARSEC_APPS[@]};do echo "$pkg";done
    else
        echo "$BENCHMARK"
    fi
}

case $SUITE in
    parsec)
        PARSEC_DIR="${BASE}/../benchmarks/parsec-3.0"
        if [ ! -d "$PARSEC_DIR" ];then
            msg "downloading PARSEC"
            cd etc/data
            wget http://parsec.cs.princeton.edu/download/3.0/parsec-3.0.tar.gz
            msg "unpacking PARSEC"
            cd ../benchmarks/
            tar xzf ../etc/data/parsec-3.0.tar.gz
            cd ../
        fi
        cd "$PARSEC_DIR"
        source env.sh
        if [ -z "$ACTION" ] || [ "$ACTION" == "unpack" ];then
            for pkg in $(parsec_apps);do parsec_unpack $pkg; done
        fi
        if [ -z "$ACTION" ] || [ "$ACTION" == "compile" ];then
            for pkg in $(parsec_apps);do parsec_compile $pkg; done
        fi
        ;;
esac
