#+Title: Optimization
#+Options: ^:nil

* Virtual Machine Setup

1. We will create a Qemu virtual machine and install the Debian 5.0.9
   specifically =debian-5010-i386-netinst.iso= from
   http://cdimage.debian.org/mirror/cdimage/archive/5.0.9/i386/iso-cd/.
   #+begin_src sh
     # create the disk
     qemu-img create -f qcow2 tune.qcow 4G
     # install the operating system
     qemu-system-x86_64 tune.qcow -cdrom debian-5010-i386-netinst.iso -boot d
   #+end_src

2. Walk through the instillation dialog, we'll set the following
   values.
   | hostname            | tune          |
   | version             | stable        |
   | root password       | password      |
   | new user full name  | Francis Bacon |
   | new user login name | bacon         |
   | new user password   | password      |

   As Debian Lenny is no longer supported, You will not be able to
   find a working mirror.  When you are confronted with the warning
   that no working mirror has been found, select the =<Go Back>=
   option, and then continue installing a minimal system with no
   working mirror.  Finish the instillation and Reboot.

3. After booting into the working system, log in as root and add old
   Lenny archive URLs to =/etc/apt/sources.list=.
   #+begin_src sh
     cp /etc/apt/sources.list /etc/apt/sources.list.backup
     echo "deb http://archive.debian.org/debian/ lenny main" >> /etc/apt/sources.list
     echo "deb http://archive.debian.org/debian-security lenny/updates main" >> /etc/apt/sources.list
     apt-get update
   #+end_src

4. Now install the Graphite dependencies,
   #+begin_src sh
     apt-get install build-essential m4
     apt-get install libboost1.35-dev libboost-filesystem1.35-dev libboost-system1.35-dev
     apt-get install git-core
     # and an ssh server so we can ssh into this VM
     apt-get install openssh-server
   #+end_src
   give the =bacon= user =sudo= permissions,
   #+begin_src sh
     apt-get install sudo
     echo "bacon   ALL=(ALL) ALL" >> /etc/sudoers
   #+end_src
   and shutdown the machine.
   #+begin_src sh
     shutdown -h 0
   #+end_src

5. Start up the virtual machine with network access so we can connect
   with ssh -- allowing copy-paste from the local machine, use of a
   normal terminal, and other niceties.
   #+begin_src sh
     qemu-kvm -hda tune.qcow -nographic -cdrom data/debian-5010-amd64-netinst.iso -m 1G -net nic -net user,hostfwd=tcp:127.0.0.1:2222-:22 -daemonize
   #+end_src

6. Log into =tune= as =bacon=.
   #+begin_src sh
     ssh -p 2222 bacon@localhost
   #+end_src
   and install Graphite following these instructions from
   https://github.com/mit-carbon/Graphite/wiki/Getting-Started,
   #+begin_src sh
     wget http://www.cs.virginia.edu/kim/publicity/pin/kits/pin-2.6-27887-gcc.4.0.0-ia32_intel64-linux.tar.gz
     tar xzf pin-2.6-27887-gcc.4.0.0-ia32_intel64-linux.tar.gz
     cd pin
     git clone git://github.com/mit-carbon/Graphite.git graphite
   #+end_src
   and update the =TARGET_ARCH= and =PIN_HOME= variables in =~/graphite/Makefile.config=.
   #+begin_src sh
     cat <<EOF > ~/graphite/Makefile.config
     # Use ia32 for 32-bit, x86_64 for 64-bit
     TARGET_ARCH = x86_64 # <-(may be different depending on your host?)

     # change only if a different (more up-to-date) version of Boost is installed
     BOOST_VERSION = 1_35

     # where Pin is uzipped to
     PIN_HOME = /home/bacon/pin
     EOF
   #+end_src
   run =make= to build Graphite.

7. Confirm that the build was successful by running the following
   which should exit successfully.
   #+begin_src sh
     make ping_pong_app_test CORES=16 PROCS=2
   #+end_src

8. At this point the virtual machine is usable for running
   applications through Graphite and collecting metrics.  If modeling
   power consumption then one more dependency must be installed.
   McPAT is available at http://www.hpl.hp.com/research/mcpat/.  The
   tarball should be downloaded to the virtual machine and unpacked
   into the home directory.
   #+begin_src sh
     cd ~/archives/
     wget http://www.hpl.hp.com/research/mcpat/mcpat0.8_r274.tar.gz
     cd ~
     tar xzf archives/mcpat0.8_r274.tar.g
     sudo apt-get install libc6-dev-i386
     cd mcpat0.8_r274/
     make
   #+end_src

* Running a Simple Fast Fourier Transform (FFT)
The FFT benchmark has higher memory requirements than the simple
ping-pong test, so for this we'll have to increase the memory of the
VM by passing the =-m 1G= flag to the call to =qemu-kvm=.
#+begin_src sh
  qemu-kvm -hda tune.qcow -nographic -cdrom data/debian-5010-amd64-netinst.iso -m 1G -net nic -net user,hostfwd=tcp:127.0.0.1:2222-:22 -daemonize
#+end_src

This should run for a while and complete with output that looks like
the following.
: FFT with Blocking Transpose
:    65536 Complex Doubles
:    64 Processors
:    65536 Cache lines
:    16 Byte line size
:    4096 Bytes per page
:
:
:                  PROCESS STATISTICS
:             Computation      Transpose     Transpose
:  Proc          Time            Time        Fraction
:     0          79869664       27878043       0.34904
:
:                  TIMING INFORMATION
: Start time                        : 1333389980838004
: Initialization finish time        : 1333390099558235
: Overall finish time               : 1333390179427899
: Total time with initialization    :        198589895
: Total time without initialization :         79869664
: Overall transpose time            :         27878043
: Overall transpose fraction        :          0.34904

* Evolving a Population of Variants
Using the scripts in file:src/host-test.sh and file:src/guest-test.sh,
the experimental harness in file:src/optimize.lisp and the [[http://gitweb.adaptive.cs.unm.edu/software-evolution.git][software
evolution]] framework it is possible to evolve populations of variants
of the original FFT program to optimize for certain execution
properties.  The following instructions describe how to evolve a
population of variant programs using multiple VM back ends for
parallel fitness evaluation.

1. Copy the file:src/guest-test.sh script into the =/home/bacon/bin/=
   on the virtual machine.  Power off the virtual machine before
   performing the next step.
   #+begin_src sh
     scp src/guest-test.sh -P 2222 bacon@localhost:bin/
     ssh -p 2222 root@localhost poweroff
   #+end_src

2. The current version of file:src/host-test.sh assumes that all
   virtual machines are running on =localhost= and that they are
   placed behind different port numbers.  To setup multiple VMs on
   your local machine saving their port numbers to the
   file:src/REMOTES file (as required by file:src/host-test.sh) follow
   the steps in [[#running-overlays][Running overlays]].

3. Since ssh is apparently /very/ sensitive to widely readable public
   keys, be sure to fix access permission for file:data/id_rsa which
   may not be preserved by git.
   #+begin_src sh
     chmod 700 data/id_rsa
   #+end_src

4. Change into the =src/= directory and fire up a Common Lisp
   interpreter (SBCL version 1.0.55 was used to prepare these
   instructions).  Ensure that the [[http://gitweb.adaptive.cs.unm.edu/software-evolution.git][software evolution]] framework is
   installed and load the file:src/optimize.lisp file into your lisp
   session.  To test that things your test scripts, virtual machines,
   and lisp install are all working correctly evaluate the original
   FFT program and ensure that it's fitness is equal to 1.
   #+begin_src lisp
     (require 'software-evolution)
     (in-package 'software-evolution)
     (load "optimize.lisp")
     (unless (= 1 (fitness (evaluate *orig*)))
       (error "Something is wrong, debug your script/lisp setup."))
   #+end_src

5. If everything appears to be working as expected, then a population
   of 100 variants can be evolved to minimize execution time by
   running the following.  See file:src/optimize.lisp to change the
   default configuration of things like population size, tournament
   size, and the features optimized for.

* Running overlays
  :PROPERTIES:
  :shebang:  #!/bin/sh
  :CUSTOM_ID: running-overlays
  :END:
Qemu overlays create lightweight disk images based off of a starting
disk image which can be used to store diffs from the original, and to
run multiple instances of an original.

We'll use overlays to parallelize the fitness evaluation in our
genetic algorithm.

To create some number of overlay images run;
#+begin_src sh :tangle src/create-vms
  pushd overlays/
  for i in $(seq 46);do
      j=$(printf "%0.2d" i);
      if [ ! -f "$j.qcow" ];then
          qemu-img create -b ../tune.qcow -f qcow2 "$j.qcow"
      fi
  done
  popd
#+end_src

To run all overlays daemonized;
#+begin_src sh :tangle src/startup-vms
  remotes=""
  pushd overlays/
  for i in $(seq 46);do
      I=$(printf "%0.2d" i);
      qemu-kvm -hda $I.qcow -nographic -m 1G \
          -cdrom ../data/debian-5010-amd64-netinst.iso \
          -net nic -net user,hostfwd=tcp:127.0.0.1:30$I-:22 \
          -daemonize
      remotes="$remotes \"30$I\""
  done
  popd
  cat <<EOF > src/REMOTES
  #!/bin/sh
  REMOTES=($remotes)
  EOF
#+end_src

* Notes
** configuration and output
Configuration is controlled in =carbon_sim.cfg= in the base of the
graphite directory.

Detailed simulator output information is written to =sim.out= in the
=output_files= directory under graphite.

Configurations notes
- more complex core model would have variable instruction costs
- more complex network (hop by hop)
- power_modeling to true
- enable_models_at_startup set to false
- maybe try different synchronization schemes

Date file notes
- "Tile" is a Core
- network model 2 is the actual communication of the process
  (this is what matters)

** running times by VM memory
Running =time ./bin/guest-test.s=.

- with =-m 1024=.
  : real    4m20.468s
  : user    2m27.185s
  : sys     1m52.055s

- with =-m 2048=
  : real    4m19.885s
  : user    2m25.457s
  : sys     1m53.167s

** successfully running evolutionary steps
#+begin_src slime-repl
  SOFTWARE-EVOLUTION> (setf results '(#<PLL-ASM {1008347463}> #<PLL-ASM {1007F17463}>))
  
  ; in: SETF RESULTS
  ;     (SETF SOFTWARE-EVOLUTION::RESULTS
  ;             '(#<SOFTWARE-EVOLUTION::PLL-ASM {1008347463}>
  ;               #<SOFTWARE-EVOLUTION::PLL-ASM {1007F17463}>))
  ; ==>
  ;   (SETQ SOFTWARE-EVOLUTION::RESULTS
  ;           '(#<SOFTWARE-EVOLUTION::PLL-ASM {1008347463}>
  ;             #<SOFTWARE-EVOLUTION::PLL-ASM {1007F17463}>))
  ; 
  ; caught WARNING:
  ;   undefined variable: RESULTS
  ; 
  ; compilation unit finished
  ;   Undefined variable:
  ;     RESULTS
  ;   caught 1 WARNING condition
  (#<PLL-ASM {1008347463}> #<PLL-ASM {1007F17463}>)
  SOFTWARE-EVOLUTION> (equal-it (genome (first results)) (genome (second results)))
  STYLE-WARNING: redefining SOFTWARE-EVOLUTION::STATS in DEFUN
  NIL
  SOFTWARE-EVOLUTION> (mapcar #'stats results)
  (((TIME-WO-INIT . 103187924) (HISTORY (:SWAP 3561 2147)))
   ((TIME-WO-INIT . 101699638) (HISTORY (:INSERT 1600 2344))))
#+end_src
