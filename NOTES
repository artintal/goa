Optimization Notes                                         -*- org -*-
#+Options: ^:{}

* Work Plan
:   train energy    memory       benchmarks       baselines       write
:     models      fitness func       |         (Rinard, O2 O3)      |
:      |              |              |                |             |
:      |              v              |                v             |
:      +--> begin evolutionary <-----+------------> apply           |
:                 runs                            baselines         |
:                  |                                  |             |
:                  v                                  v             |
:            lists of bests --------------> compare performance     |
:                  |                        against baselines       |
:                  v                                  |             |
:             minimize and                            |             |
:               analyze                               |   table     |
:                  |                                  |  results    |
:                  |                                  +------------>|
:        +---------+----------+                                     |
:        |                    |                                     |
:        v                    v                                     |
:    taxonomy of      compare to known                              |
:   optimizations       techniques             find loop            |
:        |                    |               perforation, etc...   |
:        |                    +------------------------------------>|
:        |                                                          |
:        |                                                          |
:        |                                      taxonomy            |
:        +--------------------------------------------------------->|
:                                                                   |
:                                                                   |
:                                                                   v
:                                                                finished
:                                                                 paper

** Optional Additional Topics
- Breeders :: apply the Breeders Equation to analyze the relations
              between software traits and predict directions of
              software evolution

- Pareto :: return a Pareto frontier of solutions as a result of
            optimization rather than a single individual

- MCMC :: our mutation operations are nearly MCMC compliant already,
          with some small changes we should be able to implement MCMC
          as a search strategy

* Notes
** Benchmarks
*** PARSEC applications
| Program      | Language   | parallel      | test difficulty | working set | communication |
|--------------+------------+---------------+-----------------+-------------+---------------|
| blackscholes | C/CPP      | data parallel | easy            | small       | negligible    |
| bodytrack    | CPP        | pipeline      | hard            |             |               |
| facesim      | C/CPP      | data parallel | hard            |             |               |
| ferret       | C          | pipeline      | hard            | huge        | very much     |
| fluidanimate | CPP        | data parallel | easy            | large       | some          |
| freqmine     | CPP/OpenMP | data parallel | medium          | huge        | some          |
| raytrace     | C/OpenGL   | data parallel |                 | large       | little        |
| swaptions    | CPP        | data parallel |                 | medium      | little        |
| vips         | C          | data parallel | medium (image)  | medium      | some          |
| x264         | C          | pipeline      | medium (video)  | medium      | very          |

* Tasks [9/58]
** TODO Build all benchmarks to ASM [5/41]
*** parsec
**** DONE Blackscholes
**** DONE bodytrack
Here is the command I used to make an executable from the assembly file.:
: g++ -DHAVE_CONFIG_H -I. -I/nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/bodytrack/src/FlexImageLib -I.. -O3 -g -funroll-loops -fprefetch-loop-arrays -fpermissive -fno-exceptions  -static-libgcc -Wl,--hash-style=both,--as-needed -DPARSEC_VERSION=3.0-beta-20120904 -fexceptions  -MT FlexImage.lo -MD -MP -MF /nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/bodytrack/obj/amd64-linux.gcc/FlexImageLib/.deps/FlexImage.Plo -I /nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/bodytrack/obj/amd64-linux.gcc/ -L /nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/bodytrack/obj/amd64-linux.gcc/FlexImageLib/.libs/ -I /nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/libs/tbblib/src/include/ -L /nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/bodytrack/obj/amd64-linux.gcc/TrackingBenchmark/threads/.libs/ bodytrack.s -o bodytrack -lflex -lpthread -lthreads

And here is the command I used to make the asm file (note the relative
paths. Might be a good idea to change to absolute paths) see the
management script to make the cpp file:
: g++ -DHAVE_CONFIG_H -I. -I/nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/bodytrack/src/FlexImageLib -I.. -O3 -g -funroll-loops -fprefetch-loop-arrays -fpermissive -fno-exceptions  -static-libgcc -Wl,--hash-style=both,--as-needed -DPARSEC_VERSION=3.0-beta-20120904 -fexceptions  -MT FlexImage.lo -MD -MP -MF ../../obj/amd64-linux.gcc/FlexImageLib/.deps/FlexImage.Plo -I ../../obj/amd64-linux.gcc/ -L ../../obj/amd64-linux.gcc/FlexImageLib/.libs/ -I ../../../../libs/tbblib/src/include/ -L../../../../libs/tbblib/src/include/ -L ../../obj/amd64-linux.gcc/TrackingBenchmark/threads/.libs/ -S tst.cpp -o bodytrack.s -lflex -lpthread -lthreads

**** TODO facesim
before running make, you have to do
: export PHYSBAM=$(pwd)

**** TODO ferret
Can't seem to build this one with the parsec tools.
Tried: ./parsecmgmt -a build -p ferret
got:
  make: *** [all] Error 2
  [PARSEC] Error: 'env LIBS= -lm /usr/bin/make' failed.

Using the makefile in the ferret src directory also fails:
  /nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/ferret/src/src/hash_table.c:24:25: fatal error: gsl/gsl_rng.h: No such file or directory
   #include <gsl/gsl_rng.h>
                         ^
  compilation terminated.
  make: *** [/nfs/adaptive/stharding/tmp/parsec-3.0/pkgs/apps/ferret/src/parsec/obj/hash_table.o] Error 1

Indeed, hash_table.c does try to include gsl/gsl_rng.h wich does not exist on the system.
Looks like we may need to install GSL. See:
http://seal.web.cern.ch/seal/workbook/gsl-howto.html

**** DONE fluidanimate
**** DONE freqmine
1. cat all .cpp files together
2. remove duplicates of
   : include "common.h"
3. remove the second duplicate of the =omp_get_max_threads()=

**** TODO raytrace
**** DONE swaptions
#+begin_src sh
  cat *.c* > swaptions.cpp
  g++ -S swaptions.cpp
  g++ swaptions.s -o swaptions2
#+end_src

**** TODO vips
**** TODO x264
*** SPEC
**** TODO 400.perlbench
**** TODO 401.bzip2
**** TODO 403.gcc
**** TODO 410.bwaves
**** TODO 416.gamess
**** TODO 429.mcf
**** TODO 433.milc
**** TODO 434.zeusmp
**** TODO 435.gromacs
**** TODO 436.cactusADM
**** TODO 437.leslie3d
**** TODO 444.namd
**** TODO 445.gobmk
**** TODO 447.dealII
**** TODO 450.soplex
**** TODO 453.povray
**** TODO 454.calculix
**** TODO 456.hmmer
**** TODO 458.sjeng
**** TODO 459.GemsFDTD
**** TODO 462.libquantum
**** TODO 464.h264ref
**** TODO 465.tonto
**** TODO 470.lbm
**** TODO 471.omnetpp
**** TODO 473.astar
**** TODO 481.wrf
**** TODO 482.sphinx3
**** TODO 483.xalancbmk
**** TODO 998.specrand
**** TODO 999.specrand
** DONE Select Energy Models [2/2]
\begin{equation*}
  kwh = c_{1} + c_{2} \times cyc + c_{3} \times ins + c_{4} \times ops + c_{5} \times tca + c_{6} \times mem
\end{equation*}

| metric                 | perf              |
|------------------------+-------------------|
| cyc                    | cycles            |
| ins                    | instructions      |
| ops(AMD Opteron)       | r533f00           |
| ops(Intel Sandybridge) | r532010 + r538010 |
| tca                    | cache-references  |
| mem                    | cache-misses      |

*** Measuring required counters with =perf=
Not all counters are provided by default, so we need to use HW
specific raw event.  According to [[http://web.eece.maine.edu/~vweaver/projects/perf_events/faq.html#q2e][this faq]] to find the appropriate
code for the raw events grab [[http://perfmon2.sourceforge.net/][libpfm4]] from [[http://sourceforge.net/projects/perfmon2/files/][here]].  Then unpack the
files, build, and browse the available raw events with the following.

#+begin_src sh
  cd libpfm-4.3.0
  make
  cd example
  ./showevtinfo -E|less
#+end_src

The resulting hex value can then be passed to perf by prefixing it
with an "r".

*** DONE AMD energy model
: perf stat -e cycles,instructions,r533f00,cache-references,LLC-loads,LLC-stores -- command

*** DONE Intel energy model
: perf stat -e cycles,instructions,r532010,r538010,cache-references,LLC-loads,LLC-stores

** TODO Train Energy Models [1/4]
Both at UVA on Intel and at UNM on AMD.

*** TODO constrain the model to pass through the origin
Cycles is a proxy for time, so 0 counters should imply 0 kwh.

*** TODO include last two benchmark programs [0/2]
- [ ] x264 from parsec (compiled)
- [ ] dealII from SPEC

**** DealII
See this discussion of how to use alternate sources.
http://www.spec.org/cpu2006/Docs/config.html#sectionIX

See the list of alternate sources by SPEC version.
http://www.spec.org/cpu2006/src.alt/

See the particular alternate source which must be applied for dealII
to compile.
http://www.spec.org/cpu2006/src.alt/447.dealII.explicit_inclusion_of_cstring.cpu2006.v1.0.tar.bz2

The command lines work out to be roughly
#+begin_src sh
  specbz2 -dc 403.gcc.no_line.cpu2006.v1.2.tar.xz | spectar -xf  -
  echo "ext = without" > configs/without.cfg
  runspec --action buildsetup -T base -c without -v 1 447.dealII
  cat <<EOF > configs/with.cfg
  ext = with
  447.dealII:
  srcalt = explicit_inclusion_of_cstring
  EOF
  runspec --action buildsetup -T base -c with -v 1 447.dealII
  # now the changes have been applied, to then use the updated version
  # run the following where complex.cfg is replaced with the config file
  # for your system
  runspec --action build -c complex.cfg -v 1 447.dealII
#+end_src

*** DONE AMD Energy Model
| metric           | perf             | coefficient |
|------------------+------------------+-------------|
| cyc              | cycles           |   4.411e-14 |
| ins              | instructions     |   2.235e-15 |
| ops(AMD Opteron) | r533f00          |  -8.531e-16 |
| tca              | cache-references |  -1.256e-14 |
| mem              | cache-misses     |   3.679e-13 |

**** Collected raw data relating energy consumption to hw counters.
#+name: amd-energy-and-hw-metrics
| benchmark      | time |    kwh |         watts |        cycles |  instructions |       r533f00 | cache-references | cache-misses |
|----------------+------+--------+---------------+---------------+---------------+---------------+------------------+--------------|
| blackscholes   |  439 | 0.0405 | 333.007061503 |  963681322941 |  759844691381 |  440277963193 |     165728320541 |    140040400 |
| bodytrack      |  345 | 0.0325 |  339.41884058 |  733091005874 |  781067817081 |  405865777512 |     127287608572 |    245673468 |
| facesim        |  0.0 |    0.0 |           0.0 |      16560559 |      14789833 |       1693208 |          4697405 |        74581 |
| ferret         |  522 | 0.0507 | 350.532950192 | 1588471176139 | 1748909071671 |  508858865217 |     567858426857 |    100044775 |
| fluidanimate   |  650 | 0.0608 | 337.591076923 | 1433302012584 | 1677896998422 | 1002609778300 |     484568539692 |     21997404 |
| freqmine       |  849 | 0.0806 | 342.344051826 | 1848878873062 | 2450052339453 |      49431788 |     791028342362 |     66097064 |
| raytrace       |  378 | 0.0358 | 341.426190476 |  834912012589 | 1204834722923 |  646652063937 |     244447040716 |    841572881 |
| swaptions      |  580 |  0.054 | 335.989482759 | 1277170247920 | 1458456204847 |  613924489347 |     361402521432 |    150688646 |
| vips           |  233 | 0.0219 | 338.053218884 |  506403393629 |  770985463673 |  204387614153 |     143861054265 |    203743614 |
| sleep2         |    1 | 0.0001 |         325.0 |       1068673 |        628101 |          1790 |           238757 |         9261 |
| sleep5         |    4 | 0.0004 |       327.375 |       1069525 |        606630 |          1774 |           256435 |        10316 |
| sleep10        |    9 | 0.0008 | 326.233333333 |       1021646 |        626510 |          1721 |           247746 |        10388 |
| sleep30        |   29 | 0.0026 | 323.475862069 |       1019901 |        649767 |          1785 |           237688 |         9336 |
| sleep60        |   59 | 0.0052 | 321.937288136 |       1037259 |        618201 |          1769 |           229123 |         9201 |
| blackscholes   |  437 | 0.0405 | 334.313501144 |  962242554271 |  759823452448 |  440248110213 |     159457388792 |    129664715 |
| bodytrack      |  346 | 0.0323 | 336.672543353 |  733724456347 |  781057881137 |  405865621890 |     127240780364 |    193147096 |
| facesim        |  0.0 |    0.0 |           0.0 |      16043941 |      14867195 |       1688548 |          4719060 |        73992 |
| ferret         |  522 | 0.0503 | 347.481417625 | 1608827613673 | 1748979636562 |  508724194111 |     567547428624 |    101952537 |
| fluidanimate   |  649 | 0.0609 | 337.980585516 | 1438777004290 | 1677905068279 | 1003486864457 |     484679953040 |     21736128 |
| freqmine       |  848 | 0.0805 | 342.425707547 | 1843800403467 | 2450061993769 |      49425812 |     791415640031 |     66253490 |
| raytrace       |  377 | 0.0358 | 341.849867374 |  831780621631 | 1204809370390 |  646658574964 |     245001617881 |    937017963 |
| swaptions      |  578 | 0.0539 | 336.156747405 | 1274440983375 | 1458375779265 |  613619457154 |     362297763899 |     48489018 |
| vips           |  235 | 0.0221 | 338.945106383 |  497932290315 |  770623602908 |  203161466196 |     144316491452 |    206477267 |
| sleep2         |    1 |    0.0 |         325.3 |       1057931 |        621206 |          1792 |           232246 |         9312 |
| sleep5         |    4 | 0.0003 |         325.0 |       1061374 |        617416 |          1746 |           221495 |         9137 |
| sleep10        |    9 | 0.0008 | 324.377777778 |        956587 |        609894 |          1735 |           237629 |         9774 |
| sleep30        |   29 | 0.0026 | 323.289655172 |       1075075 |        644843 |          1736 |           228295 |         9522 |
| sleep60        |   59 | 0.0053 | 322.161016949 |       1116455 |        642621 |          1733 |           234232 |         9589 |
| blackscholes   |  439 | 0.0407 | 333.797266515 |  978537944311 |  759853135482 |  448108538602 |     159681951945 |    130110732 |
| bodytrack      |  345 | 0.0326 | 340.417971014 |  734430891707 |  781078301944 |  405901756994 |     127221390140 |    214104415 |
| facesim        |  0.0 |    0.0 |           0.0 |      15865765 |      14759180 |       1691132 |          4682768 |        73876 |
| 400.perlbench  |  172 | 0.0164 | 343.927325581 |  363205546396 |  673460255215 |     198103220 |     168940598894 |    448530688 |
| 401.bzip2      |  127 | 0.0121 |  341.48503937 |  280624033346 |  319812916322 |        268031 |     105223223290 |      6408514 |
| 403.gcc        |   24 | 0.0023 | 341.170833333 |   55270414187 |   52882913988 |     501470091 |      19001587893 |    137057463 |
| 410.bwaves     | 1930 | 0.1848 | 345.140725389 | 4237316105602 | 3340156118640 | 1608974718204 |     785753595114 |     86869305 |
| 416.gamess     |  259 | 0.0247 | 344.312741313 |  568989187150 | 1047126415135 |  404543004871 |     212818566730 |    122987990 |
| 429.mcf        |  996 | 0.0951 |  344.20060241 | 2117183253301 |  303695508258 |       4429256 |     122279702747 |     42132139 |
| 433.milc       |  616 | 0.0595 | 348.169967532 | 1361085107228 | 1181353371826 |  850005142260 |     211799352223 |     29960505 |
| 434.zeusmp     |  881 | 0.0839 | 343.000908059 | 1942840268672 | 1805419511735 | 1596582662098 |     407497075587 |     46809057 |
| 435.gromacs    |  859 | 0.0813 | 341.240861467 | 1891264738863 | 2160419213985 | 1734939474915 |     416863263346 |     60722123 |
| 436.cactusADM  | 1426 | 0.1357 | 343.065287518 | 3133609562731 | 2730087227455 | 2830219681072 |     649952731741 |     99446625 |
| 437.leslie3d   |  717 | 0.0693 | 348.251324965 | 1569704929576 | 1551526352154 | 1059334560787 |     321208209593 |     42223855 |
| 444.namd       |  708 | 0.0671 | 341.838700565 | 1556051397196 | 2257288024298 | 1682197205095 |     466800570445 |     30132681 |
| 445.gobmk      |  136 | 0.0129 | 341.908088235 |  299407520238 |  323819168201 |    1723948132 |     144389853031 |    639965759 |
| 450.soplex     |  302 | 0.0289 | 345.098675497 |  643362986038 |  358494728333 |  128977762038 |     102926641824 |     17581665 |
| 453.povray     |  324 | 0.0309 | 343.569135802 |  713862677233 |  945909381078 |  347548355646 |     279604811656 |   1312346898 |
| 454.calculix   | 1423 | 0.1354 | 342.999508082 | 3130626046436 | 6166081367888 | 3715717501412 |    1344503685294 |    201472325 |
| 456.hmmer      |  416 | 0.0398 | 345.001201923 |  915193135250 | 1878847157364 |   17603610038 |     284255339691 |     30323193 |
| 458.sjeng      |  906 | 0.0861 | 342.556622517 | 1996773046731 | 2200085290815 |       1221094 |     981587003984 |    455529921 |
| 459.GemsFDTD   |  882 | 0.0854 |  349.20521542 | 1925374860097 | 1566606447376 | 1173916753733 |     280276041570 |     43114955 |
| 462.libquantum |  972 | 0.0941 | 348.936419753 | 2096058789720 | 1856427541448 |    4331708084 |     643820893885 |     35091747 |
| 464.h264ref    |  939 | 0.0895 | 343.535463259 | 2056952424155 | 2426423692805 |    1438263416 |     512591933779 |    562704357 |
| 465.tonto      | 1571 | 0.1489 | 341.581667728 | 3471179796415 | 3147373470456 | 1734083749913 |     806146473044 |   1584069489 |
| 470.lbm        |  816 |  0.079 | 348.779901961 | 1797592416770 | 1261010132344 | 1219123374595 |     207620646064 |     29699997 |
| 471.omnetpp    |  542 | 0.0518 | 344.322693727 | 1156254727500 |  588222734645 |   60116420268 |     201985211961 |   2200652189 |
| 473.astar      |  423 | 0.0401 | 341.430023641 |  934367239164 |  815560161952 |     133140874 |     361211047283 |     20556701 |
| 481.wrf        |  0.0 |    0.0 |           0.0 |     593370968 |     711694385 |     107167259 |        154949631 |       161652 |
| 482.sphinx3    | 1181 | 0.1107 | 337.783149873 | 2595951183221 | 3349740098022 | 2190608682991 |     770495377859 |    202291716 |
| 998.specrand   |  0.0 |    0.0 |           0.0 |     350025649 |     563269510 |      20079782 |        161604673 |      1484586 |
| 999.specrand   |  0.0 |    0.0 |           0.0 |     362873259 |     563235015 |      20069938 |        161784725 |      1479227 |

**** Trained a linear model off of these counters
     :PROPERTIES:
     :eval:     no
     :END:
These two models were generated using the following.

#+begin_src sh
  power-model.R etc/data/combined-benchmarks.csv
#+end_src

kwh ~  cycles instructions fops cache.references cache.misses
|                  |   Estimate | Std. Error |      t |  value | Pr  |
|------------------+------------+------------+--------+--------+-----|
| (Intercept)      |  3.036e-04 |  7.203e-04 |  0.421 | 0.6751 |     |
| cycles           |  4.411e-14 |  1.069e-15 | 41.243 | <2e-16 | *** |
| instructions     |  2.235e-15 |  1.959e-15 |  1.141 | 0.2591 |     |
| fops             | -8.531e-16 |  1.292e-15 | -0.660 | 0.5119 |     |
| cache.references | -1.256e-14 |  6.340e-15 | -1.981 | 0.0527 | .   |
| cache.misses     |  3.679e-13 |  1.214e-12 |  0.303 | 0.7630 |     |

#+begin_src sh
  build_power_model.py --target=kwh \
    --model=cycles,instructions,flop,cache-references,cache-misses \
    etc/data/combined-benchmarks.csv
#+end_src

Modeling kwh
| cycles           |   4.4212e-14 |
| instructions     |  1.27494e-15 |
| flop             | -6.77546e-16 |
| cache-references | -8.60545e-15 |
| cache-misses     |  1.42351e-13 |
| constant         |  0.000410495 |

*** TODO Intel Energy Model
** TODO Complete test suites for some benchmarks
Ideally at least one or two from each group of benchmark programs.
Spec has some open-source programs (e.g., perl, gcc, bzip) which could
be good candidates.  Eric will look into some better tests for PARSEC
programs.

** TODO Build a Memory Fitness Function
We could use the "bubble" and the "reporter" from [[#mars2011bubble]].
Measuring the values of HW counters against the bubble could give us
coefficients for a memory linear model.

** TODO Find Warehouse Compute Benchmark Applications
** TODO Run Experiments
| benchmark    | Energy UVA | Energy UNM | Memory UVA | Memory UNM |
|--------------+------------+------------+------------+------------|
| PARSEC       |            |            |            |            |
|--------------+------------+------------+------------+------------|
| blackscholes |            |            |            |            |
| bodytrack    |            |            |            |            |
| facesim      |            |            |            |            |
| ferret       |            |            |            |            |
| fluidanimate |            |            |            |            |
| freqmine     |            |            |            |            |
| raytrace     |            |            |            |            |
| swaptions    |            |            |            |            |
| vips         |            |            |            |            |
| x264         |            |            |            |            |
|--------------+------------+------------+------------+------------|
| SPEC         |            |            |            |            |
|--------------+------------+------------+------------+------------|
|              |            |            |            |            |
|--------------+------------+------------+------------+------------|
| Warehouse    |            |            |            |            |
|--------------+------------+------------+------------+------------|

** TODO Baseline Runs
** TODO Build table results table
** TODO Analyze Optimizations
** TODO Build optimization Taxonomy
* Setup and Reproduction Instructions
The following instructions may be used to reproduce and expand upon
these results.

** Installing PARSEC
The PARSEC homepage is at http://parsec.cs.princeton.edu/.  Download
the [[http://parsec.cs.princeton.edu/download/3.0/parsec-3.0.tar.gz][PARSEC tarball]], and unpack it into the benchmarks sub-directory of
this repository.

** Using the Graphite Virtual Machine
*** Virtual Machine Setup

1. We will create a Qemu virtual machine and install the Debian 5.0.9
   specifically =debian-5010-i386-netinst.iso= from
   http://cdimage.debian.org/debian-cd/6.0.6/amd64/iso-cd/debian-6.0.6-amd64-netinst.iso
   #+begin_src sh
     # create the disk
     qemu-img create -f qcow2 tune.qcow 24G
     # install the operating system
     qemu-system-x86_64 tune.qcow -cdrom debian-5010-i386-netinst.iso -boot d
   #+end_src

2. Walk through the instillation dialog, we'll set the following
   values.
   | hostname            | tune          |
   | version             | stable        |
   | root password       | password      |
   | new user full name  | Francis Bacon |
   | new user login name | bacon         |
   | new user password   | password      |

   When it comes time to select which packages to install, deselect
   "Graphical desktop environment" and do select "SSH server".

   After the setup completes reboot and log in as root.

4. Now install the Graphite and Parsec dependencies,
   #+begin_src sh
     # Graphite dependencies
     apt-get update
     apt-get install build-essential libtool automake autoconf autotools-dev
     apt-get install libboost1.42-dev libboost-filesystem1.42-dev libboost-system1.42-dev
     apt-get install git-core
     # Parsec dependencies
     apt-get install gettext yasm
     # So the bacon user can have sudo
     apt-get install sudo
   #+end_src
   give the =bacon= user =sudo= permissions,
   #+begin_src sh
     echo "bacon   ALL=(ALL) ALL" >> /etc/sudoers
   #+end_src
   and shutdown the machine.
   #+begin_src sh
     shutdown -h now
   #+end_src

5. Start up the virtual machine with network access so we can connect
   with ssh -- allowing copy-paste from the local machine, use of a
   normal terminal, and other niceties.
   #+begin_src sh
     qemu-kvm -hda tune.qcow -nographic -cdrom data/debian-5010-amd64-netinst.iso \
         -m 1G -net nic -net user,hostfwd=tcp:127.0.0.1:2222-:22 -daemonize
   #+end_src

*** Running Graphite
1. Log into =tune= as =bacon=.
   #+begin_src sh
     ssh -p 2222 bacon@localhost
   #+end_src
   and install Graphite following these instructions from
   https://github.com/mit-carbon/Graphite/wiki/Getting-Started, after
   getting version 53271 of pin from [[http://www.pintool.org/downloads.html][PIN|downloads]] decompress it to
   =~/pin=.  Then set this location into =~/graphite/Makefile.config=.
   #+begin_src sh
     cat <<EOF > ~/graphite/Makefile.config
     # where Pin is uzipped to
     PIN_HOME = /home/bacon/pin
     EOF
   #+end_src
   Run =make= to build Graphite.

2. Confirm that the build was successful by running the following
   which should exit successfully.
   #+begin_src sh
     make ping_pong_app_test CORES=16 PROCS=2
   #+end_src

3. At this point the virtual machine is usable for running
   applications through Graphite and collecting metrics.  If modeling
   power consumption then one more dependency must be installed.
   McPAT is available at http://www.hpl.hp.com/research/mcpat/.  The
   tarball should be downloaded to the virtual machine and unpacked
   into the home directory.
   #+begin_src sh
     cd ~/archives/
     wget http://www.hpl.hp.com/research/mcpat/mcpat0.8_r274.tar.gz
     cd ~
     tar xzf archives/mcpat0.8_r274.tar.g
     sudo apt-get install g++-multilib libc6-dev-i386
     mv mcpat0.8_r274/ mcpat/
     cd mcpat/
     make
   #+end_src

   To enable power modeling, in =~/graphite/carbon_sim.cfg= set
   =enable_power_modeling= to =true=.
   #+begin_src sh
     sed 's/enable_power_modeling = false/enable_power_modeling = true/' \
         -i ~/graphite/carbon_sim.cfg
   #+end_src

*** Running the PARSEC benchmark with Graphite
Much of these instructions are adopted from [[https://github.com/mit-carbon/Graphite/wiki/Adding-and-Running-Applications#Running an application from the PARSEC benchmark suite][Running an application
from the PARSEC benchmark suite]].

1. To install Parsec in the virtual machine for use with Graphite,
   download and unpack the tarball from
   http://parsec.cs.princeton.edu/download/3.0/parsec-3.0.tar.gz.
   #+begin_src sh
     cd ~/archives/
     wget http://parsec.cs.princeton.edu/download/3.0/parsec-3.0.tar.gz
     cd ~/graphite/tests/
     # this may take some time...
     tar xzf archives/parsec-3.0.tar.gz
   #+end_src

2. Add Parsec and Graphite environment variables to =~/.profile=.
   #+begin_src sh
     cat <<EOF >> ~/.profile
     export PIN_HOME=$HOME/pin
     export GRAPHITE_HOME=$HOME/graphite
     export PARSEC_HOME=$GRAPHITE_HOME/tests/parsec-2.1
     export PARSECDIR=$PARSEC_HOME
     export xxPARSECDIRxx=$PARSECDIR
     source $PARSEC_HOME/env.sh
     EOF
   #+end_src

3. We can largely just follow the instructions on the [[https://github.com/mit-carbon/Graphite/wiki/Adding-and-Running-Applications#Running%20an%20application%20from%20the%20PARSEC%20benchmark%20suite][graphite wiki]].

4. Then from the Graphite home directory, set the =PARSEC_HOME=
   variable in the file =tests/Makefile.parsec= to point to the source
   of the PARSEC source tree.
   #+begin_src sh
     cd ${GRAPHITE_HOME}
     sed -i "s/^PARSEC_HOME \?= \?.*$/PARSEC_HOME=$(echo $PARSEC_HOME|sed 's/\//\\\//g')/" \
         tests/Makefile.parsec
   #+end_src

   Run =make parsec_setup= and =make [app]_parsec= to simulate the
   =[app]= with Graphite using the parameters specified in
   =tests/Makefile.parsec=. E.g.,
   #+begin_src sh
     make blackscholes_parsec
   #+end_src

*** Running a Simple Fast Fourier Transform (FFT)
The FFT benchmark has higher memory requirements than the simple
ping-pong test, so for this we'll have to increase the memory of the
VM by passing the =-m 1G= flag to the call to =qemu-kvm=.
#+begin_src sh
  ./src/run-vm tune.qcow 2222
#+end_src

This should run for a while and complete with output that looks like
the following.
: FFT with Blocking Transpose
:    65536 Complex Doubles
:    64 Processors
:    65536 Cache lines
:    16 Byte line size
:    4096 Bytes per page
:
:
:                  PROCESS STATISTICS
:             Computation      Transpose     Transpose
:  Proc          Time            Time        Fraction
:     0          79869664       27878043       0.34904
:
:                  TIMING INFORMATION
: Start time                        : 1333389980838004
: Initialization finish time        : 1333390099558235
: Overall finish time               : 1333390179427899
: Total time with initialization    :        198589895
: Total time without initialization :         79869664
: Overall transpose time            :         27878043
: Overall transpose fraction        :          0.34904

*** Evolving a Population of Variants
This experimental setup is held in a git directory available from
http://gitweb.adaptive.cs.unm.edu/optimization.git for anonymous git
access with the following.
: git clone http://gitweb.adaptive.cs.unm.edu/optimization.git

Using the scripts in file:src/host-test and file:src/guest-test,
the experimental harness in file:src/optimize.lisp and the [[http://gitweb.adaptive.cs.unm.edu/software-evolution.git][software
evolution]] framework it is possible to evolve populations of variants
of the original FFT program to optimize for certain execution
properties.  The following instructions describe how to evolve a
population of variant programs using multiple VM back ends for
parallel fitness evaluation.

1. Copy the file:src/guest-test script into the =/home/bacon/bin/=
   on the virtual machine.  Power off the virtual machine before
   performing the next step.
   #+begin_src sh
     scp src/guest-test -P 2222 bacon@localhost:bin/
     ssh -p 2222 root@localhost poweroff
   #+end_src

2. We will use the file:src/limit.c test harness to protect our
   evolutionary process from the sometimes aberrant behavior of the
   test execution shell scripts and the evolved variants which they
   execute.  Compile both host and guest versions of this script and
   place them for use by the host and guest test scripts.
   #+begin_src sh
     # host limit harness
     gcc -o src/limit src/limit.c
     # guest limit harness
     scp src/limit.c -P 2222 bacon@localhost:bin/
     ssh -p 2222 bacon@localhost gcc -o bin/limit bin/limit.c
     ssh -p 2222 root@localhost poweroff
   #+end_src

3. The current version of file:src/host-test assumes that all
   virtual machines are running on =localhost= and that they are
   placed behind different port numbers.  To setup multiple VMs on
   your local machine saving their port numbers to the
   file:src/REMOTES file (as required by file:src/host-test) follow
   the steps in [[#running-overlays][Running overlays]].

4. Since ssh is apparently /very/ sensitive to widely readable public
   keys, be sure to fix access permission for file:data/id_rsa which
   may not be preserved by git.
   #+begin_src sh
     chmod 700 data/id_rsa
   #+end_src

5. Change into the =src/= directory and fire up a Common Lisp
   interpreter (SBCL version 1.0.55 was used to prepare these
   instructions).  Ensure that the [[http://gitweb.adaptive.cs.unm.edu/software-evolution.git][software evolution]] framework is
   installed and load the file:src/optimize.lisp file into your lisp
   session.  To test that things your test scripts, virtual machines,
   and lisp install are all working correctly evaluate the original
   FFT program and ensure that it's fitness is equal to 1.
   #+begin_src lisp
     (require 'software-evolution)
     (in-package 'software-evolution)
     (load "optimize.lisp")
     (unless (neutral-p (evaluate *orig*))
       (error "Something is wrong, debug your script/lisp setup."))
   #+end_src

6. If everything appears to be working as expected, then a population
   of 100 variants can be evolved to minimize execution time by
   running the following.  See file:src/optimize.lisp to change the
   default configuration of things like population size, tournament
   size, and the features optimized for.

*** Running overlays
  :PROPERTIES:
  :shebang:  #!/bin/sh
  :CUSTOM_ID: running-overlays
  :END:
Qemu overlays create lightweight disk images based off of a starting
disk image which can be used to store diffs from the original, and to
run multiple instances of an original.

We'll use overlays to parallelize the fitness evaluation in our
genetic algorithm.

To create some number of overlay images run;
#+begin_src sh :tangle src/create-vms
  pushd overlays/
  for i in $(seq 46);do
      j=$(printf "%0.2d" i);
      if [ ! -f "$j.qcow" ];then
          qemu-img create -b ../tune.qcow -f qcow2 "$j.qcow"
      fi
  done
  popd
#+end_src

To run all overlays daemonized;
#+begin_src sh :tangle src/startup-vms
  remotes=""
  pushd overlays/
  for i in $(seq 46);do
      I=$(printf "%0.2d" i);
      ../src/run-vm "$I.qcow" "30$I"
      remotes="$remotes \"30$I\""
  done
  popd
  cat <<EOF > src/REMOTES
  #!/bin/sh
  REMOTES=($remotes)
  EOF
#+end_src

*** Running LLVM/Clang and clang-mutate
1. Log into =tune= as =root=

2. Install subversion.
   #+begin_src sh
     apt-get install subversion
   #+end_src

3. Install the llvm/clang from SVN.
   #+begin_src sh
     cd /usr/local/src/
     svn co http://llvm.org/svn/llvm-project/llvm/trunk llvm
     cd llvm/tools/
     svn co http://llvm.org/svn/llvm-project/cfe/trunk clang
     cd ../
     ./configure && make install && make clean
   #+end_src

4. Install [[https://github.com/eschulte/clang-mutate][clang-mutate]] from git.
   #+begin_src sh
     cd /usr/local/src/
     git clone git://github.com/eschulte/clang-mutate.git
     cd clang-mutate
     make install && make clean
   #+end_src

